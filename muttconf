#!/usr/bin/env bash
#
# Muttconf - A tool to help configure accounts in Mutt
# Copyright (C) 2019  Dave Shoreman <aur+muttconf at dsdev dot io>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -Eeo pipefail

# If exit status is 69, user hit ^C from main menu so we'll ignore it
trap '[ $? != 69 ] && error -e "\nAborted due to error" && exit 1' ERR

readonly _VERSION="0.1.0"

main() {
    while :; do
        ( trap '[ "$page" == "Main Menu" ] && quit || exit 0' SIGINT
            main_menu
        ); [ $? -eq 69 ] && break
    done
}

main_menu() {
    page="Main Menu"
    print_logo

    case "$(list_actions q)" in
        n)
            create_account ;;
        q)
            quit ;;
    esac
}

create_account() {
    local confirmed mailboxes password retry tries=10 try=1
    page="Account Creator"

    while [[ ! "${confirmed}" =~ [yY] ]]; do
        get_account_details

        prompt confirmed "Are these values correct?" "n" "yN" 1
    done

    set_password

    # TODO: Add prompts to enter manually when not found
    # shellcheck disable=SC2154
    find_server_config "${email_address}"

    while [ -z "${mailboxes}" ] && (( "${try}" <= "${tries}" )); do
        page="Verifying Connection Details"
        load_mailboxes
        (( try++ ))

        if [ -z "${mailboxes}" ] && [[ ! "${retry}" =~ [yY] ]]; then
            return
        fi
    done

    page="Saving Configuration"
    save_configs && success -e "\n\nAll done! Press enter to return to main menu"

    read -r
}

# shellcheck disable=SC2154
get_account_details() {
    print_logo

    info -e " This page will guide you through setting up a new account. Start by entering\n" \
        "a name for the account (e.g. \"Home\"), then follow the prompts to configure\n" \
        "your email settings. You'll choose how to store mail on the next screen.\n\n" \
        "You can return to the main menu at any time by pressing Ctrl C."

    prompt account_name "Account Name" "$account_name"
    prompt realname "Your Name" "$realname"
    prompt email_address "Email Address" "$email_address"
    prompt username "Username" "${username:-$email_address}"

    bold=1 warn -e "\n You entered the following details:"
    bold=1 plain -n "     Your Name: " && echo "${realname}"
    bold=1 plain -n "  Account Name: " && echo "${account_name}"
    bold=1 plain -n " Email Address: " && echo "${email_address}"
    bold=1 plain -n "      Username: " && echo "${username}"
}

set_password() {
    local passconf
    while [ -z "${password}" ] || [ "${password}" != "${passconf}" ]; do
        print_logo

        info -e " Now that the main account details are set, you'll need to enter your\n" \
            "password so that MuttConf can retrieve a list of folders and configure\n" \
            "Mutt to connect automatically without prompting for a password every\n" \
            "time. If it's available, passwords will be stored using LastPass CLI."

        [ -n "${password}" ] && bold=1 error " The passwords you entered don't match! Try again."

        passprompt password "Enter password"
        passprompt passconf "Confirm password"
    done

    unset passconf

    info -e "\n Saving password to LastPass..."
    if {
        echo "Username: ${username}"
        echo "Password: ${password}"
        echo -e "Notes: \nAdded by MuttConf.\nEmail: ${email_address}\nReal Name: ${realname}"
    } | lpass add "Email/MuttConf/${account_name}" --non-interactive --sync=now; then
        unset password && lpass sync
        success " Password saved!"
    else
        error " Failed saving password, falling back to plain text."
    fi
    sleep 1
}

find_server_config() {
    case "${1#*@}" in
        gmail.com)
            provider=gmail
            imap_server=imap.gmail.com:993
            smtp_server=smtp.gmail.com:587
            ;;
        icloud.com|me.com)
            provider=icloud
            imap_server=imap.mail.me.com:993
            smtp_server=smtp.mail.me.com:587
            ;;
    esac
}

find_lpass_id() {
    local lpass_account

    lpass_account=$(lpass ls --sync=now -l "Email/MuttConf" | grep "${account_name}")

    echo "${lpass_account}" | sed -E 's/.*\[id: ([0-9]+)\].*/\1/'
}

load_mailboxes() {
    local code=0 pass_actual response
    print_logo

    info "Logging in to ${imap_server} (attempt ${try} of ${tries})..."
    pass_actual="${password:-$(lpass show --password "$(find_lpass_id)")}"
    response="$(curl -su "${username}:${pass_actual}" "imaps://${imap_server}")" || \
        code="$?" && :

    if [ "${code}" == "67" ]; then
        bold=1 error "Login failed!"
        info "${response}"

        if [ "${provider}" == "gmail" ]; then
            bold=1 warn "Gmail and GSuite users must enable access for Less Secure Apps:"
            warn "https://myaccount.google.com/lesssecureapps"
        fi

        if [ "${try}" == "${tries}" ]; then
            bold=1 error -e "\nMaximum retries has been reached!"
            info "Verify that your username and password are correct, then try again later."
            retry=n && echo && pause
        else
            prompt retry "Try again?" "y" "Yn" 1
        fi
        return
    fi

    info "Parsing mailboxes..."
    mailboxes="$(echo "${response}" | grep -o '".*"' | sed 's_"/" "\(.*\)"_\1_')"
    success "Found $(echo -n "${mailboxes}" | wc -l) mailboxes for ${email_address}"

    info "Matching folders..."
    maildir_inbox="$(grep -i inbox <<< "${mailboxes}")"
    maildir_drafts="$(grep -i drafts <<< "${mailboxes}")"
    maildir_sent="$(grep "Sent Messages" <<< "${mailboxes}" || grep -i sent <<< "${mailboxes}")"
}

# shellcheck disable=SC2089,2090
save_configs() {
    print_logo
    info " That's all for now! Below is a summary of your mail configuration." \
        "This will be saved to ~/.config/mutt/muttrc should you wish to edit manually."

    bold=1 info "Account Details:"
    info -n "            Username: "; echo "${username}"
    info -n "       Email Address: "; echo "${email_address}"
    info -n "Incoming Mail Server: "; echo "${imap_server}"
    info -n "Outgoing Mail Server: "; echo "${smtp_server}"
    echo
    bold=1 info "Mailboxes:"
    info -n "  Inbox: "; echo "${maildir_inbox}"
    info -n " Outbox: "; echo "${maildir_sent}"
    info -n " Drafts: "; echo "${maildir_drafts}"

    [ -f ~/.config/mutt/muttrc ] && \
        warn "WARNING: An existing muttrc has been detected!" && \
        warn "Saving now will overwrite your current muttrc."
    pause

    echo " Setting password command..."
    [ -z "${password}" ] && password="\`lpass show --password \"Email/MuttConf/${account_name}\"\`"

    echo "Customising muttrc template..."
    muttrc=$(
        export email_address realname username imap_server smtp_server password \
            maildir_inbox maildir_drafts maildir_sent
        envsubst < templates/muttrc
    )

    unset password
    echo "Saving config..."
    mkdir -p ~/.config/mutt
    echo "${muttrc}" > ~/.config/mutt/muttrc
}

list_actions() {
    local actions=() validopts=() opt

    case "${FUNCNAME[1]}" in
        main_menu)
            actions+=("n;Create a new account;success")
            actions+=("q;Quit;error")
            ;;
    esac

    for action in "${actions[@]}"; do
        IFS=";" read -ra action <<< "${action}"
        validopts+=("${action[0]}")

        echo -n " [${action[0]}] " >&2
        bold=1 ${action[2]:-info} "${action[1]}" >&2
    done

    prompt opt "Enter selection" "${1}" "${1}" 1
    while [[ ! " ${validopts[*]} " == *" ${opt} "* ]]; do
        warn -e "\nInvalid option '${opt}'" >&2
        prompt opt "Enter selection" "${1}" "${1}" 1
    done

    echo "$opt" && echo >&2
}

# shellcheck disable=SC2016
print_logo() {
    clear; echo
    bold=1
    success '    /$$      /$$             /$$     /$$      /$$$$$$                       /$$$$$$ '
    success '   | $$$    /$$$            | $$    | $$     /$$__  $$                     /$$__  $$'
    success '   | $$$$  /$$$$ /$$   /$$ /$$$$$$ /$$$$$$  | $$  \__/  /$$$$$$  /$$$$$$$ | $$  \__/'
    success '   | $$ $$/$$ $$| $$  | $$|_  $$_/|_  $$_/  | $$       /$$__  $$| $$__  $$| $$$$    '
    success '   | $$  $$$| $$| $$  | $$  | $$    | $$    | $$      | $$  \ $$| $$  \ $$| $$_/    '
    success '   | $$\  $ | $$| $$  | $$  | $$ /$$| $$ /$$| $$    $$| $$  | $$| $$  | $$| $$      '
    success '   | $$ \/  | $$|  $$$$$$/  |  $$$$/|  $$$$/|  $$$$$$/|  $$$$$$/| $$  | $$| $$      '
    success '   |__/     |__/ \______/    \___/   \___/   \______/  \______/ |__/  |__/|__/      '
    bold=0

    warn -en "\n    $(printf "%-55s" "[ ${page} ]")"
    success -e "     Version ${_VERSION}\n"
}

quit() {
    info -e "\nGoodbye!"
    exit 69
}

info() {
    colourise 36 "$@"
}

warn() {
    colourise 33 "$@"
}

error() {
    colourise 31 "$@"
}

success() {
    colourise 32 "$@"
}

plain() {
    colourise 37 "$@"
}

pause() {
    read -n1 -srp "Press any key to continue..."
}

# Prompt the user for input
# Arguments:
#   string  var         required    Variable the result should be assigned to
#   string  prompt      required    Text used for the prompt
#   string  default     optional    Default value if none is given
#   string  values      optional    All possible values including default
#   integer length      optional    Number of characters to accept from input
prompt() {
    declare -n var=$1
    local chars="${5}" default="${3}" question="${2}" values="${4}"

    [ -n "${default}" ] || [ -n "${values}" ] && values=" [${values:-$default}]"

    if [ -n "${chars}" ]; then
        bold=1 colourise 37 -en "\n${question}${values}: " >&2
        read -rn"${chars}" var
    else
        bold=1 info -e "\n ${question}${values}:" >&2
        read -rp $' ' var
    fi
    var="${var:-$default}"
}

passprompt() {
    declare -n var=$1

    bold=1 colourise 37 -e "\n ${2}:"
    read -rsp $' ' var
}

colourise() {
    echo -en "\033[${bold:-0};${1}m"
    echo "${@:2}"
    echo -en "\033[0m"
}

main
