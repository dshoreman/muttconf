#!/usr/bin/env bash
#
# Muttconf - A tool to help configure accounts in Mutt
# Copyright (C) 2019  Dave Shoreman <aur+muttconf at dsdev dot io>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -Eeo pipefail

# If exit status is 69, user hit ^C from main menu so we'll ignore it
trap '[ $? != 69 ] && error -e "\nAborted due to error" && exit 1' ERR

readonly _VERSION="0.0.0"

main() {
    while :; do
        ( trap '[ "$page" == "Main Menu" ] && quit || exit 0' SIGINT
            main_menu
        ); [ $? -eq 69 ] && break
    done
}

main_menu() {
    page="Main Menu"
    print_logo

    case "$(list_actions q)" in
        n)
            create_account ;;
        q)
            quit ;;
    esac
}

create_account() {
    local confirmed
    page="Account Creator"

    while [[ ! "${confirmed}" =~ [yY] ]]; do
        get_account_details

        prompt confirmed "Are these values correct?" "n" "yN" 1
    done

    find_server_config "${email_address}"

    save_configs && success -e "\n\nAll done! Press enter to return to main menu"

    read -r
}

# shellcheck disable=SC2154
get_account_details() {
    print_logo

    info -e " This page will guide you through setting up a new account. Start by entering\n" \
        "a name for the account (e.g. \"Home\"), then follow the prompts to configure\n" \
        "your email settings. You'll choose how to store mail on the next screen.\n\n" \
        "You can return to the main menu at any time by pressing Ctrl C."

    prompt account_name "Account Name" "$account_name"
    prompt realname "Your Name" "$realname"
    prompt email_address "Email Address" "$email_address"
    prompt username "Username" "${username:-$email_address}"

    bold=1 warn -e "\n You entered the following details:"
    bold=1 plain -n "     Your Name: " && echo "${realname}"
    bold=1 plain -n "  Account Name: " && echo "${account_name}"
    bold=1 plain -n " Email Address: " && echo "${email_address}"
    bold=1 plain -n "      Username: " && echo "${username}"
}

find_server_config() {
    case "${1#*@}" in
        gmail.com)
            imap_server=imap.gmail.com:993
            ;;
    esac
}

save_configs() {
    muttrc=$(
        export username imap_server
        envsubst < templates/muttrc
    )

    mkdir -p ~/.config/mutt
    echo "${muttrc}" > ~/.config/mutt/muttrc
}

list_actions() {
    local actions=() validopts=() opt

    case "${FUNCNAME[1]}" in
        main_menu)
            actions+=("n;Create a new account;success")
            actions+=("q;Quit;error")
            ;;
    esac

    for action in "${actions[@]}"; do
        IFS=";" read -ra action <<< "${action}"
        validopts+=("${action[0]}")

        echo -n " [${action[0]}] " >&2
        bold=1 ${action[2]:-info} "${action[1]}" >&2
    done

    prompt opt "Enter selection" "${1}" "${1}" 1
    while [[ ! " ${validopts[*]} " == *" ${opt} "* ]]; do
        warn -e "\nInvalid option '${opt}'" >&2
        prompt opt "Enter selection" "${1}" "${1}" 1
    done

    echo "$opt" && echo >&2
}

# shellcheck disable=SC2016
print_logo() {
    clear; echo
    bold=1
    success '    /$$      /$$             /$$     /$$      /$$$$$$                       /$$$$$$ '
    success '   | $$$    /$$$            | $$    | $$     /$$__  $$                     /$$__  $$'
    success '   | $$$$  /$$$$ /$$   /$$ /$$$$$$ /$$$$$$  | $$  \__/  /$$$$$$  /$$$$$$$ | $$  \__/'
    success '   | $$ $$/$$ $$| $$  | $$|_  $$_/|_  $$_/  | $$       /$$__  $$| $$__  $$| $$$$    '
    success '   | $$  $$$| $$| $$  | $$  | $$    | $$    | $$      | $$  \ $$| $$  \ $$| $$_/    '
    success '   | $$\  $ | $$| $$  | $$  | $$ /$$| $$ /$$| $$    $$| $$  | $$| $$  | $$| $$      '
    success '   | $$ \/  | $$|  $$$$$$/  |  $$$$/|  $$$$/|  $$$$$$/|  $$$$$$/| $$  | $$| $$      '
    success '   |__/     |__/ \______/    \___/   \___/   \______/  \______/ |__/  |__/|__/      '
    bold=0

    warn -en "\n    $(printf "%-55s" "[ ${page} ]")"
    success -e "     Version ${_VERSION}\n"
}

quit() {
    info -e "\nGoodbye!"
    exit 69
}

info() {
    colourise 36 "$@"
}

warn() {
    colourise 33 "$@"
}

error() {
    colourise 31 "$@"
}

success() {
    colourise 32 "$@"
}

plain() {
    colourise 37 "$@"
}

# Prompt the user for input
# Arguments:
#   string  var         required    Variable the result should be assigned to
#   string  prompt      required    Text used for the prompt
#   string  default     optional    Default value if none is given
#   string  values      optional    All possible values including default
#   integer length      optional    Number of characters to accept from input
prompt() {
    declare -n var=$1
    local chars="${5}" default="${3}" question="${2}" values="${4}"

    [ -n "${default}" ] || [ -n "${values}" ] && values=" [${values:-$default}]"

    if [ -n "${chars}" ]; then
        bold=1 colourise 37 -en "\n${question}${values}: " >&2
        read -rn"${chars}" var
    else
        bold=1 info -e "\n ${question}${values}:" >&2
        read -rp $' ' var
    fi
    var="${var:-$default}"
}

colourise() {
    echo -en "\033[${bold:-0};${1}m"
    echo "${@:2}"
    echo -en "\033[0m"
}

main
